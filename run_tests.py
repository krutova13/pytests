#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""
import os
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*50}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"{'='*50}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
    
    return result.returncode == 0


def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success = run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    if not success:
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã Playwright
    success = run_command("playwright install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright")
    if not success:
        return False
    
    return True


def run_smoke_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç smoke —Ç–µ—Å—Ç—ã"""
    return run_command(
        "pytest -m smoke -v --tb=short",
        "–ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤"
    )


def run_validation_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return run_command(
        "pytest -m validation -v --tb=short",
        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    )


def run_delivery_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    return run_command(
        "pytest -m delivery -v --tb=short",
        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏"
    )


def run_payment_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –æ–ø–ª–∞—Ç—ã"""
    return run_command(
        "pytest -m payment -v --tb=short",
        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"
    )


def run_mobile_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    return run_command(
        "pytest tests/test_mobile_responsiveness.py -v --tb=short",
        "–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
    )


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    return run_command(
        "pytest -v --tb=short",
        "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
    )


def run_parallel_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    return run_command(
        "pytest -n auto -v --tb=short",
        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
    )


def run_with_browser(browser):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º"""
    return run_command(
        f"HEADLESS=false BROWSER={browser} pytest -v --tb=short",
        f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ {browser}"
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UI —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--install", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--smoke", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã")
    parser.add_argument("--validation", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    parser.add_argument("--delivery", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
    parser.add_argument("--payment", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –æ–ø–ª–∞—Ç—ã")
    parser.add_argument("--mobile", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--parallel", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    parser.add_argument("--browser", choices=["chromium", "firefox", "webkit"], help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
    parser.add_argument("--headless", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    Path("reports").mkdir(exist_ok=True)
    Path("reports/screenshots").mkdir(exist_ok=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if args.headless:
        os.environ["HEADLESS"] = "true"
    else:
        os.environ["HEADLESS"] = "false"
    
    success = True
    
    if args.install:
        success = install_dependencies()
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            sys.exit(1)
    
    if args.smoke:
        success = run_smoke_tests() and success
    
    if args.validation:
        success = run_validation_tests() and success
    
    if args.delivery:
        success = run_delivery_tests() and success
    
    if args.payment:
        success = run_payment_tests() and success
    
    if args.mobile:
        success = run_mobile_tests() and success
    
    if args.parallel:
        success = run_parallel_tests() and success
    
    if args.browser:
        success = run_with_browser(args.browser) and success
    
    if args.all or not any([args.smoke, args.validation, args.delivery, args.payment, args.mobile, args.parallel, args.browser]):
        success = run_all_tests() and success
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()
